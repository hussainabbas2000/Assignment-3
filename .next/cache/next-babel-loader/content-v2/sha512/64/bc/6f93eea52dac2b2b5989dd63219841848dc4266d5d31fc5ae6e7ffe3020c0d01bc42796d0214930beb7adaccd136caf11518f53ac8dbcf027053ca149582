{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hussain\\\\Desktop\\\\f\\\\app\\\\components\\\\product\\\\SuggestedProducts.js\";\n\n/**\n * This component is an example of how we can fetch user-specific data for a product.\n * In general, it's a best practice to separate cacheable elements that are shown to all\n * users from areas of the page which contained information that should only be displayed\n * to a single user, such as recently viewed products and recommendations.  This separation\n * allows us to deliver most of the content from the CDN's cache and gives us the fastest\n * possible page load time.\n */\nimport React, { useState, useEffect } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport PropTypes from 'prop-types';\nimport fetch from 'react-storefront/fetch';\nimport ProductItem from './ProductItem';\nimport Typography from \"@material-ui/core/Typography\";\nimport LoadMask from 'react-storefront/LoadMask';\nexport const styles = theme => ({\n  products: {\n    minHeight: 250,\n    position: 'relative',\n    margin: theme.spacing(0, -2),\n    overflowX: 'auto',\n    maxWidth: '100%',\n    [theme.breakpoints.down('xs')]: {\n      maxWidth: '100vw'\n    }\n  },\n  wrap: {\n    padding: theme.spacing(0, 0, 0, 2),\n    display: 'flex',\n    flexDirection: 'row',\n    width: 'max-content'\n  },\n  product: {\n    margin: theme.spacing(0, 2, 0, 0),\n    minWidth: 150\n  }\n});\nconst useStyles = makeStyles(styles, {\n  name: 'RSFSuggestedProducts'\n});\nexport default function SuggestedProducts({\n  product\n}) {\n  const classes = useStyles();\n  const {\n    0: suggestedProducts,\n    1: setSuggestedProducts\n  } = useState(null); // Fetch suggested products when the product page is mounted\n\n  useEffect(() => {\n    fetch(`/api/p/${encodeURIComponent(product.id)}/suggestions`).then(res => res.json()).then(result => setSuggestedProducts(result));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"h3\",\n      children: \"Suggested Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.products,\n      children: [/*#__PURE__*/_jsxDEV(LoadMask, {\n        show: !suggestedProducts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.wrap,\n        children: suggestedProducts && suggestedProducts.map((product, i) => /*#__PURE__*/_jsxDEV(ProductItem, {\n          product: product,\n          index: i,\n          colorSelector: false,\n          className: classes.product\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\nSuggestedProducts.propTypes = {\n  /**\n   * The product being displayed.\n   */\n  product: PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })\n};","map":{"version":3,"sources":["C:/Users/Hussain/Desktop/f/app/components/product/SuggestedProducts.js"],"names":["React","useState","useEffect","makeStyles","PropTypes","fetch","ProductItem","LoadMask","styles","theme","products","minHeight","position","margin","spacing","overflowX","maxWidth","breakpoints","down","wrap","padding","display","flexDirection","width","product","minWidth","useStyles","name","SuggestedProducts","classes","suggestedProducts","setSuggestedProducts","encodeURIComponent","id","then","res","json","result","map","i","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["/**\n * This component is an example of how we can fetch user-specific data for a product.\n * In general, it's a best practice to separate cacheable elements that are shown to all\n * users from areas of the page which contained information that should only be displayed\n * to a single user, such as recently viewed products and recommendations.  This separation\n * allows us to deliver most of the content from the CDN's cache and gives us the fastest\n * possible page load time.\n */\n\nimport React, { useState, useEffect } from 'react'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport PropTypes from 'prop-types'\nimport fetch from 'react-storefront/fetch'\nimport ProductItem from './ProductItem'\nimport { Typography } from '@material-ui/core'\nimport LoadMask from 'react-storefront/LoadMask'\n\nexport const styles = theme => ({\n  products: {\n    minHeight: 250,\n    position: 'relative',\n    margin: theme.spacing(0, -2),\n    overflowX: 'auto',\n    maxWidth: '100%',\n    [theme.breakpoints.down('xs')]: {\n      maxWidth: '100vw',\n    },\n  },\n  wrap: {\n    padding: theme.spacing(0, 0, 0, 2),\n    display: 'flex',\n    flexDirection: 'row',\n    width: 'max-content',\n  },\n  product: {\n    margin: theme.spacing(0, 2, 0, 0),\n    minWidth: 150,\n  },\n})\nconst useStyles = makeStyles(styles, { name: 'RSFSuggestedProducts' })\n\nexport default function SuggestedProducts({ product }) {\n  const classes = useStyles()\n  const [suggestedProducts, setSuggestedProducts] = useState(null)\n\n  // Fetch suggested products when the product page is mounted\n  useEffect(() => {\n    fetch(`/api/p/${encodeURIComponent(product.id)}/suggestions`)\n      .then(res => res.json())\n      .then(result => setSuggestedProducts(result))\n  }, [])\n\n  return (\n    <div>\n      <Typography variant=\"h6\" component=\"h3\">\n        Suggested Products\n      </Typography>\n      <div className={classes.products}>\n        <LoadMask show={!suggestedProducts} />\n        <div className={classes.wrap}>\n          {suggestedProducts &&\n            suggestedProducts.map((product, i) => (\n              <ProductItem\n                product={product}\n                index={i}\n                key={i}\n                colorSelector={false}\n                className={classes.product}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSuggestedProducts.propTypes = {\n  /**\n   * The product being displayed.\n   */\n  product: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n}\n"]},"metadata":{},"sourceType":"module"}